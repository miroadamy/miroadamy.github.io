<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>plaintext on Miro&#39;s World</title>
    <link>https://miroadamy.com/tags/plaintext/</link>
    <description>Recent content in plaintext on Miro&#39;s World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 22 Nov 2019 11:22:48 +0800</lastBuildDate><atom:link href="https://miroadamy.com/tags/plaintext/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Current Hugo setup on Github Pages</title>
      <link>https://miroadamy.com/posts/2019-11-22-hugo-setup/</link>
      <pubDate>Fri, 22 Nov 2019 11:22:48 +0800</pubDate>
      
      <guid>https://miroadamy.com/posts/2019-11-22-hugo-setup/</guid>
      <description>How does the blog setup and publishing work Before I forget, here is how the current configuration works.
There are two repositories at play:
 source repo - https://github.com/miroadamy/miroadamy.com github pages repo (== GHPR) - https://github.com/miroadamy/miroadamy.github.io  The blog source repo contains only source files (.md, static media etc). This repo has usual submodules under the /themes - e.g. /themes/even which is one currently used.
The Githup pages repo contains generated static site, with index.</description>
    </item>
    
    <item>
      <title>From Jekyll to Hugo</title>
      <link>https://miroadamy.com/posts/2019-11-20-from-jekyll-to-hugo/</link>
      <pubDate>Wed, 20 Nov 2019 23:22:48 +0800</pubDate>
      
      <guid>https://miroadamy.com/posts/2019-11-20-from-jekyll-to-hugo/</guid>
      <description>I have decided to consolidate all piecemeal versions of my blogpost uder one roof and at the same to do these four things
 technology upgrade - from Jekyll to Hugo visual refresh of the page review tagging and categorization merge hidden posts from Wikis to one place  Why Hugo replaced Jekyll The version 3 of my blog (see below for a bit of history) has been hosted on Github pages and using the default static site generators - Jekyll.</description>
    </item>
    
    <item>
      <title>Recreate txt base graph generator</title>
      <link>https://miroadamy.com/posts/2014-09-09-redo-graph/</link>
      <pubDate>Tue, 09 Sep 2014 11:22:48 +0800</pubDate>
      
      <guid>https://miroadamy.com/posts/2014-09-09-redo-graph/</guid>
      <description>Graphviz This time using brew
‚ûú DPS brew install graphviz ==&amp;gt; Downloading https://downloads.sf.net/project/machomebrew/Bottles/graphviz-2.38.0.mavericks.bottle.tar.gz ######################################################################## 100.0% ==&amp;gt; Pouring graphviz-2.38.0.mavericks.bottle.tar.gz üç∫ /usr/local/Cellar/graphviz/2.38.0: 469 files, 68M ‚ûú DPS dot -V dot - graphviz version 2.38.0 (20140413.2041) ‚ûú DPS Schema Spy From http://sourceforge.net/projects/schemaspy/files/schemaspy/SchemaSpy%205.0.0/
To /opt/diagram
Run:
 diagram java -jar ./schemaSpy_5.0.0.jar -cp .:/Users/miro/lib/jdbc/mysql-connector-java-5.1.26-bin.jar -t mysql -o library -host localhost -u training -db training_dev01 -p training
 It produces HTML documentation for tables
Size is about 51 M for a small ATG install</description>
    </item>
    
    <item>
      <title>GitHub &#43; Gollum vs BitBucket Wiki</title>
      <link>https://miroadamy.com/posts/2012-04-07-gollum/</link>
      <pubDate>Sat, 07 Apr 2012 11:22:48 +0800</pubDate>
      
      <guid>https://miroadamy.com/posts/2012-04-07-gollum/</guid>
      <description> both Wikis are backed by Git repo both allow local edit  Gollum See https://github.com/github/gollum#readme
Installation: http://alblue.bandlem.com/2011/05/git-tip-of-week-gollum.html
 sudo gem install gollum
 Running git init TestWiki gollum --page-file-dir wiki TestWiki openurl http://localhost:4567 Parsers - separate install gem install rdiscount gem install wikicloth Get Wiki for repo git clone URL URL: - git@github.com:radegast/dotvim.wiki.git R+W - https://radegast@github.com/radegast/dotvim.wiki.git R+W - git://github.com/radegast/dotvim.wiki.git R Pros  multiple markups supports Markdown List of all pages  Questions  How to link to page in subdir  </description>
    </item>
    
    <item>
      <title>ATG module graph</title>
      <link>https://miroadamy.com/posts/2012-04-02-atg-module-graph/</link>
      <pubDate>Mon, 02 Apr 2012 11:22:48 +0800</pubDate>
      
      <guid>https://miroadamy.com/posts/2012-04-02-atg-module-graph/</guid>
      <description>Notes from weekend hack: Project is in Bitbucket - https://bitbucket.org/miroadamy/atgdiagram/overview
Run in Diagrams/ATGDiagram
Radegast:ATGDiagram miro$ groovy -cp src src/listATGModules.groovy -e -m TWeStore.eStore &amp;gt;uml/test2.uml Radegast:ATGDiagram miro$ ./processUml.sh uml/test2.uml Radegast:ATGDiagram miro$ open uml/test2.png Radegast:ATGDiagram miro$ =&amp;gt; Output test2.uml
 the &amp;lsquo;.&amp;rsquo; in names is converted to &amp;lsquo;_&amp;rsquo; - GraphViz does not like it the &amp;lsquo;-&amp;rsquo; in names detto  Using ATG_ROOT from environment variable $ATG_ROOT: /opt/ATG/ATG10.0.2 Using /opt/ATG/ATG10.0.2 installation Dependants of module TWeStore.</description>
    </item>
    
    <item>
      <title>Diagram generation - plain text approach</title>
      <link>https://miroadamy.com/posts/2012-03-30-diagram-generation/</link>
      <pubDate>Fri, 30 Mar 2012 11:22:48 +0800</pubDate>
      
      <guid>https://miroadamy.com/posts/2012-03-30-diagram-generation/</guid>
      <description>GraphViz  installed from package See http://www.graphviz.org/  Radegast:diagrams miro$ dot -V dot - graphviz version 2.28.0 (20110509.1545) Radegast:diagrams miro$ which dot dot is /usr/local/bin/dot SchemaSpy  installed in /opt/diagrams see http://schemaspy.sourceforge.net/  Radegast:schemaSpy miro$ java -jar ./schemaSpy_5.0.0.jar -cp .:/Users/miro/lib/java/jdbc/mysql-connector-java-5.1.7-bin.jar -t mysql -o library -host localhost -u twt_dX_core -db twt_dX_core -p twt_dX_core Using database properties: [./schemaSpy_5.0.0.jar]/net/sourceforge/schemaspy/dbTypes/mysql.properties Gathering schema details....................................................................................................................................................................................................................................................................................................................................................(36sec) Writing/graphing summary..... .......(353sec) Writing/diagramming details.................................................................................................................................................................................................................................................................................................................................................(104sec) Wrote relationship details of 337 tables/views to directory &amp;#39;library&amp;#39; in 494 seconds.</description>
    </item>
    
    <item>
      <title>Using Wiki markup without a Wiki</title>
      <link>https://miroadamy.com/posts/2007-05-17-using-wiki-markup-without-a-wiki/</link>
      <pubDate>Thu, 17 May 2007 22:10:44 -0400</pubDate>
      
      <guid>https://miroadamy.com/posts/2007-05-17-using-wiki-markup-without-a-wiki/</guid>
      <description>Even with having Wiki as the main documentation repository, not all documentation ends up in a Wiki. Some documentation needs to be managed as part of the source tree - e.g. Readme&#39;s, compilation instructions and similar. This information is usually either plain text or in some form of text processor format, mostly Microsoft Word compatible. Both have their selection of problems. Word documents are large, bloated, harder to version controlled and not readable in shell environment (try to cat or tail Word document :-)).</description>
    </item>
    
  </channel>
</rss>
